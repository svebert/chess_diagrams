name: Calculate Legal Diagram Ratios

on:
  workflow_dispatch:
    inputs:
      max_classes:
        description: "Max number of material classes to process (for testing). Leave empty for full dataset."
        required: false
        default: ""

  push:
    branches: [ main ]

jobs:
  prepare-material:
    runs-on: ubuntu-latest
    outputs:
      material-file: dist/material_classes.parquet
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Generate material classes
        run: |
          mkdir -p dist
          if [ -n "${{ github.event.inputs.max_classes }}" ]; then
            echo "Generating limited dataset with ${{ github.event.inputs.max_classes }} classes"
            python material_classes.py --output_parquet dist/material_classes.parquet --max_classes ${{ github.event.inputs.max_classes }}
          else
            echo "Generating full dataset"
            python material_classes.py --output_parquet dist/material_classes.parquet
      - name: Upload material file
        uses: actions/upload-artifact@v4
        with:
          name: material
          path: dist/material_classes.parquet

  simulate:
    needs: prepare-material
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Download material file
        uses: actions/download-artifact@v4
        with:
          name: material
          path: dist
      - name: Run legality simulation for shard
        run: |
          total=$(python -c "import pandas as pd; print(len(pd.read_parquet('dist/material_classes.parquet')))") 
          per=$(( (total + 15) / 16 ))  # ceil-division
          start=$(( matrix.shard * per ))
          end=$(( start + per ))
          if [ $end -gt $total ]; then end=$total; fi
          echo "Processing classes $start-$end (of $total total)"
          mkdir -p dist/legality_parts
          python simulate_legality.py \
            --input dist/material_classes.parquet \
            --start-id $start \
            --end-id $end \
            --output dist/legality_parts/results_${{ matrix.shard }}.parquet
      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: shard-${{ matrix.shard }}
          path: dist/legality_parts/results_${{ matrix.shard }}.parquet

  merge-results:
    needs: simulate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Download all partials
        uses: actions/download-artifact@v4
        with:
          path: dist/legality_parts
      - name: Merge parquet files
        run: |
          python merge_legality_results.py \
            --input-dir dist/legality_parts \
            --output dist/legality_results.parquet
      - name: Upload final merged file
        uses: actions/upload-artifact@v4
        with:
          name: final-results
          path: dist/legality_results.parquet
